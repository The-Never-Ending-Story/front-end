{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  discoveredWorlds: []\n};\nexport const rootSlice = createSlice({\n  name: 'root',\n  initialState,\n  reducers: {\n    getDiscoveredWorlds: (state, action) => {\n      state.discoveredWorlds = action.payload;\n    }\n    // saveWorld: (state, action) => {\n    //   state.discoveredWorlds.push(action.payload)\n    // },\n    // deleteWorld: (state, action) => {\n    //   state.discoveredWorlds = state.discoveredWorlds.filter(world => world !== action.payload)\n    // }\n  }\n});\n\nexport const {\n  getDiscoveredWorlds\n} = rootSlice.actions;\nexport default rootSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","discoveredWorlds","rootSlice","name","reducers","getDiscoveredWorlds","state","action","payload","actions","reducer"],"sources":["/Users/adammeza/turing/4mod/front-end/never-ending/src/app/rootSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  discoveredWorlds: [],\n}\n\nexport const rootSlice = createSlice( \n  {\n    name: 'root',\n    initialState, \n    reducers: {\n      getDiscoveredWorlds: (state, action) => {\n        state.discoveredWorlds = action.payload\n      }\n      // saveWorld: (state, action) => {\n      //   state.discoveredWorlds.push(action.payload)\n      // },\n      // deleteWorld: (state, action) => {\n      //   state.discoveredWorlds = state.discoveredWorlds.filter(world => world !== action.payload)\n      // }\n    }\n  }\n)\n\nexport const { getDiscoveredWorlds } = rootSlice.actions;\nexport default rootSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,gBAAgB,EAAE;AACpB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAClC;EACEI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRC,mBAAmB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACtCD,KAAK,CAACL,gBAAgB,GAAGM,MAAM,CAACC,OAAO;IACzC;IACA;IACA;IACA;IACA;IACA;IACA;EACF;AACF,CACF,CAAC;;AAED,OAAO,MAAM;EAAEH;AAAoB,CAAC,GAAGH,SAAS,CAACO,OAAO;AACxD,eAAeP,SAAS,CAACQ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}